// Code generated by MockGen. DO NOT EDIT.
// Source: log.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
	reflect "reflect"
)

// MockLogZap is a mock of LogZap interface
type MockLogZap struct {
	ctrl     *gomock.Controller
	recorder *MockLogZapMockRecorder
}

// MockLogZapMockRecorder is the mock recorder for MockLogZap
type MockLogZapMockRecorder struct {
	mock *MockLogZap
}

// NewMockLogZap creates a new mock instance
func NewMockLogZap(ctrl *gomock.Controller) *MockLogZap {
	mock := &MockLogZap{ctrl: ctrl}
	mock.recorder = &MockLogZapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogZap) EXPECT() *MockLogZapMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockLogZap) Error(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error
func (mr *MockLogZapMockRecorder) Error(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogZap)(nil).Error), varargs...)
}

// Info mocks base method
func (m *MockLogZap) Info(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info
func (mr *MockLogZapMockRecorder) Info(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogZap)(nil).Info), varargs...)
}
